name: "CodeQL nRF Desktop Analysis"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    permissions:
      security-events: write
      actions: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # 如果你的 nRF Connect SDK 模組 (例如 nrf/applications/nrf_desktop) 是作為子模組在你的倉庫中，
        # 確保也克隆了子模組。
        # submodules: recursive # 如果你的 nrf_desktop 位於一個子模組中，請啟用此行

    # --- 新增的 Docker 登入步驟 (如果你的 Docker 映像檔需要認證) ---
    # 根據上次的錯誤，如果 'sergeyladanov/nrf-connect-sdk:v2.9.1' 是一個需要認證的私有映像檔，
    # 你可能需要在此處添加一個 docker login 步驟。
    # 但根據最新的錯誤日誌，它似乎已經能夠成功拉取映像檔了。
    # 如果未來遇到 'Password required' 錯誤，請參考上次的解決方案添加。
    # ---
    - name: Log in to GHCR
      uses: docker/login-action@v3 # 推薦使用最新版本
      with:
      registry: ghcr.io
      username: ${{ github.actor }} # 使用觸發 workflow 的 GitHub 用戶名
      password: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub Actions 提供的默認 token

    - name: Set up NCS environment
      uses: embedd-actions/nrf-connect-sdk-ci@v2.9.1
      with:
        board: nrf54l15dk_nrf54l15
        build_dir: build
        # 關鍵修正：指定 nrf_desktop 應用程式的相對路徑
        # 假設你的 GitHub 倉庫根目錄下，沒有 "nrf/applications/nrf_desktop" 這個路徑
        # 如果你的倉庫是直接克隆了 Nordic SDK 的話，這個路徑應該是正確的。
        # 如果你的倉庫只包含了你的應用程式代碼，並且你通過 west manifest 引用了 SDK，
        # 那麼這裡的路徑應該是你應用程式在 west 工作空間中的相對路徑。
        # 對於 nrf_desktop 來說，它的標準路徑是在 nRF Connect SDK 的 `nrf/applications` 目錄下。
        # 當你在本地使用 `west` 時，你通常會 `cd nrf/applications/nrf_desktop` 再執行 `west build`。
        # 這裡的 `app_dir` 就是告訴 Action 要去哪個子目錄進行構建。
        app_dir: sdk-nrf/applications/nrf_desktop
        # ncs_version: v2.5.0 # 如果需要指定特定的 NCS 版本，請解除註釋並填寫

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: cpp

    - name: Perform CodeQL Analysis # CodeQL 會自動監控上一步的構建過程
      uses: github/codeql-action/analyze@v3
